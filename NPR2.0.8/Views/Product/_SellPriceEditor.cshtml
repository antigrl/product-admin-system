@model NPRModels.ProductSellPrice
@using NPR2._0._8.Helpers
@using NPRModels

<div class="sell-prices">
    @using (Html.BeginCollectionItem("ProductSellPrices"))
    {
        <div class="sell-price">
            <div class="left-content">
                <b><u>@Html.DisplayFor(model => model.SellPriceName)</u></b>
                <br />
                <b>@Html.DisplayNameFor(model => model.SellPriceLevel): </b>@Html.DisplayFor(model => model.SellPriceLevel)
                <br />
                <b>Margin: </b>
                %@Html.TextBoxFor(model => model.SellPriceMarginPercent, new { @class = "percent-value" })
                $@Html.DisplayFor(model => model.SellPriceMarginDollarAmount)
                <br />
            </div>
            <div class="right-content">
                <b>Fees</b>
                <span>
                    @Html.ActionLink("Add New Sell Price Fee", "Create", "Fee", new { ReturnUrl = Url.Action("Edit", "Product", new { id = Model.ProductID, ReturnUrl = ViewBag.ReturnUrl }), ProductSellPriceID = Model.SellPriceID }, null)
                </span>
                @foreach (var fee in Model.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                {
                    if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Percent))
                    {
                        Html.RenderPartial("_SellPricePercentFeeEditor", fee);
                    }
                    if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount))
                    {
                        Html.RenderPartial("_SellPriceDollarFeeEditor", fee);
                    }
                    if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Amortized))
                    {
                        Html.RenderPartial("_SellPriceAmortizedFeeEditor", fee);
                    }
                }
            </div>
        </div>
        <div class="final-sell-price">
            <b>@Html.DisplayFor(model => model.SellPriceName) Sell Price:</b>

            <span>
                @Html.TextBoxFor(model => model.SellPriceFinalAmount, new { @class = "dollar-value" })
            </span>

            <div class="upcharged-sell-price">
                @foreach (var upcharge in Model.Product.ProductUpcharges.Where(u => u.UpchargeStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                {
                    foreach (var upchargeSellPrice in upcharge.UpchargeSellPrices.Where(s => s.UpchargeSellPriceStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                    {
                        if (upchargeSellPrice.UpchargeSellPriceLevel == Model.SellPriceLevel)
                        {
                            <b>@upcharge.UpchargeName | @upchargeSellPrice.UpchargeSellPriceName Sell Price: </b>
                            <span>$@upchargeSellPrice.UpchargeSellPriceFinalAmount</span>
                            <br />
                        }
                    }
                }
            </div>
        </div>
        <div class="hidden-inputs">
            @Html.HiddenFor(model => model.SellPriceID)
            @Html.HiddenFor(model => model.ProductID)
            @Html.HiddenFor(model => model.SellPriceLevel)
            @Html.HiddenFor(model => model.SellPriceName)
            @Html.HiddenFor(model => model.SellPriceMarginDollarAmount)
            @Html.HiddenFor(model => model.SellPriceMarginPercent)
            @Html.HiddenFor(model => model.SellPriceStatus)
        </div>
    }
</div>
