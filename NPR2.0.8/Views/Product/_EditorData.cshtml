@model NPRModels.Product
@using NPRModels;
@using NPR2._0._8.Helpers;

<div id="product-editor-data">
    <div class="full-content product-info">
        <div class="left-half-content">
            @if(Model == null)
            {
                <div class="editor-label">
                    @Html.LabelForRequired(model => model.CampaignID, "Campaign")
                </div>
                <div class="editor-field">
                    @Html.DropDownList("CampaignID", ViewBag.Campaigns as SelectList, String.Empty)
                    @Html.ValidationMessageFor(model => model.CampaignID)
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.CampaignID)
            }

            @if(Model != null)
            {
                <div class="editor-label">
                    @Html.LabelForRequired(model => model.ProductStatus)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.ProductStatus, MyExtensions.GetGenericEnumDropDown<Status>(), "")
                    @Html.ValidationMessageFor(model => model.ProductStatus)
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.ProductStatus, new { Value = MyExtensions.GetEnumDescription(Status.New) })
                @Html.ValidationMessageFor(model => model.ProductStatus)
            }

            <div class="product-image">
                <div class="editor-label">
                    @Html.LabelForRequired(model => model.ProductImage)
                </div>
                <div class="editor-field">
                    <input type="file" name="ProductImage" id="ProductImage" />
                    @Html.HiddenFor(model => model.ProductImage)
                    @Html.HiddenFor(model => model.ProductImageType)
                </div>
                <div class="image">
                    @if(Model != null)
                    {
                        <img src="@Url.Action("Show", "Product", new { id = Model.ProductID })" />
                    }
                    @Html.ValidationMessageFor(model => model.ProductImage)
                </div>
            </div>
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductSalesHistory)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductSalesHistory)
                @Html.ValidationMessageFor(model => model.ProductSalesHistory)
            </div>
        </div>
        <div class="right-half-content">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductName)
                @Html.ValidationMessageFor(model => model.ProductName)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductDescription)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductDescription)
                @Html.ValidationMessageFor(model => model.ProductDescription)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.MajorCategoryID)
            </div>
            <div class="editor-field">
                @if(Model == null)
                {
                    @Html.DropDownList("MajorCategoryID", ViewBag.MajorCategories as SelectList, String.Empty)
                }
                else
                {
                    @Html.DropDownList("MajorCategoryID", ViewBag.MajorCategories as SelectList)
                }
                @Html.ValidationMessageFor(model => model.MajorCategoryID)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.MinorCategoryID)
            </div>
            <div class="editor-field">
                @if(Model == null || Model.MinorCategoryID == null)
                {
                    @Html.DropDownList("MinorCategoryID", ViewBag.MinorCategories as SelectList, String.Empty)
                }
                else
                {
                    @Html.DropDownList("MinorCategoryID", ViewBag.MinorCategories as SelectList)
                }
                @Html.ValidationMessageFor(model => model.MinorCategoryID)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductGatewayCDISKU)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductGatewayCDISKU)
                @Html.ValidationMessageFor(model => model.ProductGatewayCDISKU)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductItemEDP)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductItemEDP)
                @Html.ValidationMessageFor(model => model.ProductItemEDP)
            </div>
        </div>
    </div>
    <div class="product-left-content">
        <div class="general-info">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductUnitOfMeasure)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductUnitOfMeasure)
                @Html.ValidationMessageFor(model => model.ProductUnitOfMeasure)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.PackagingTypeID, "PackagingType")
            </div>
            <div class="editor-field">
                @if(Model == null)
                {
                    @Html.DropDownList("PackagingTypeID", ViewBag.PackagingTypes as SelectList, String.Empty)
                }
                else
                {
                    @Html.DropDownList("PackagingTypeID", ViewBag.PackagingTypes as SelectList)
                }
                @Html.ValidationMessageFor(model => model.PackagingTypeID)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductReplacementItemNumber)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductReplacementItemNumber)
                @Html.ValidationMessageFor(model => model.ProductReplacementItemNumber)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductPresentationSell)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductPresentationSell)
                @Html.ValidationMessageFor(model => model.ProductPresentationSell)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductQuoteNumber)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductQuoteNumber)
                @Html.ValidationMessageFor(model => model.ProductQuoteNumber)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductSelectedColors)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductSelectedColors)
                @Html.ValidationMessageFor(model => model.ProductSelectedColors)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductSelectedSizes)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductSelectedSizes)
                @Html.ValidationMessageFor(model => model.ProductSelectedSizes)
            </div>
        </div>
        <div class="vendor-info">

            <div class="editor-label">
                @Html.LabelForRequired(model => model.VendorNameID, "VendorName")
            </div>
            <div class="editor-field">
                @if(Model == null)
                {
                    @Html.DropDownList("VendorNameID", ViewBag.VendorNames as SelectList, String.Empty)
                }
                else
                {
                    @Html.DropDownList("VendorNameID", ViewBag.VendorNames as SelectList)                    
                }
                @Html.ValidationMessageFor(model => model.VendorNameID)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.VendorTypeID, "VendorType")
            </div>
            <div class="editor-field">
                @if(Model == null || Model.VendorTypeID == null)
                {
                    @Html.DropDownList("VendorTypeID", ViewBag.VendorTypes as SelectList, String.Empty)
                }
                else
                {
                    @Html.DropDownList("VendorTypeID", ViewBag.VendorTypes as SelectList)
                }
                @Html.ValidationMessageFor(model => model.VendorTypeID)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductVendorLeadTime)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductVendorLeadTime)
                @Html.ValidationMessageFor(model => model.ProductVendorLeadTime)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductVendorMinimumOrder)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductVendorMinimumOrder)
                @Html.ValidationMessageFor(model => model.ProductVendorMinimumOrder)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductCountryOfOrigin)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductCountryOfOrigin)
                @Html.ValidationMessageFor(model => model.ProductCountryOfOrigin)
            </div>
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductHarmonizedCode)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductHarmonizedCode)
                @Html.ValidationMessageFor(model => model.ProductHarmonizedCode)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductInitialOrderQuantity)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductInitialOrderQuantity)
                @Html.ValidationMessageFor(model => model.ProductInitialOrderQuantity)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductVendorItemNumber)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductVendorItemNumber)
                @Html.ValidationMessageFor(model => model.ProductVendorItemNumber)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductAnnualSalesProjection)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductAnnualSalesProjection)
                @Html.ValidationMessageFor(model => model.ProductAnnualSalesProjection)
            </div>

            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductGatewayCDIMinumumOrder)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductGatewayCDIMinumumOrder)
                @Html.ValidationMessageFor(model => model.ProductGatewayCDIMinumumOrder)
            </div>
        </div>
    </div>
    @if(Model != null)
    {
        <div class="product-right-content">
            <div class="price-info">
                <div class="toggle-fee">
                    <button type="button" class="toggle-company-fees">Show/Hide Company Fee Section</button>
                </div>
                <div class="company-fees">
                    <b>Add Default Fees</b>
                    <table>
                        <thead>
                            <tr>
                                <th>Dollar Fees</th>
                                <th>Percent Fees</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @foreach(var item in Model.Campaign.Company.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount)).OrderBy(f => f.FeeName.FeeNameName))
                                    {
                                        ViewBag.FeeNames = new SelectList(new NPREntities().FeeNames, "FeeNameID", "FeeNameName", item.FeeNameID);
                                        <div class="company-fee">
                                            @Html.ActionLink("Add Fee", "BlankEditorRowExtended", null, new { productID = Model.ProductID, feeType = item.FeeType, inheritedID = item.FeeID, feeNameID = item.FeeNameID, feeDollarAmount = item.FeeDollarAmount, feeAmortizedCharge = item.FeeAmortizedCharge, feeAmortizedType = item.FeeAmortizedType, feePercent = item.FeePercent, feePercentType = item.FeePercentType }, new { @class = "add-existing-fee" })
                                            <input type="checkbox" class="existing-fee-checkbox" name="@item.FeeName" value="@item.FeeID" data-html-location=".dollar-fee-info .fees" />
                                            @item.FeeName.FeeNameName : [@Convert.ToDouble(item.FeeDollarAmount).ToString("c")]
                                        </div>
                                    }
                                </td>
                                <td>
                                    @foreach (var item in Model.Campaign.Company.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Percent)).OrderBy(f => f.FeeName.FeeNameName))
                                    {
                                        <div class="company-fee">
                                            @Html.ActionLink("Add Fee", "BlankEditorRowExtended", null, new { productID = Model.ProductID, feeType = item.FeeType, inheritedID = item.FeeID, feeNameID = item.FeeNameID, feeDollarAmount = item.FeeDollarAmount, feeAmortizedCharge = item.FeeAmortizedCharge, feeAmortizedType = item.FeeAmortizedType, feePercent = item.FeePercent, feePercentType = item.FeePercentType }, new { @class = "add-existing-fee" })
                                            <input type="checkbox" class="existing-fee-checkbox" name="@item.FeeName" value="@item.FeeID" data-html-location=".percent-fee-info .fees" />
                                            @{  /* NOTE: used convert.todouble to tostring("g") to remove trailing 0's */
                                        string typeDisplay = "";
                                        if(item.FeePercentType == MyExtensions.GetEnumDescription(PercentTypeList.Division))
                                        {
                                            typeDisplay = "÷";
                                        }
                                        else if(item.FeePercentType == MyExtensions.GetEnumDescription(PercentTypeList.Multiplication))
                                        {
                                            typeDisplay = "×";
                                        }
                                            }
                                            @item.FeeName.FeeNameName : [@Convert.ToDouble(item.FeePercent).ToString("G")% | @typeDisplay]
                                        </div>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <th>Amortized Fees</th>
                            </tr>
                            <tr>
                                <td>
                                    @foreach (var item in Model.Campaign.Company.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Amortized)).OrderBy(f => f.FeeName.FeeNameName))
                                    {
                                        ViewBag.FeeNames = new SelectList(new NPREntities().FeeNames, "FeeNameID", "FeeNameName", item.FeeNameID);
                                        <div class="company-fee">
                                            @Html.ActionLink("Add Fee", "BlankEditorRowExtended", null, new { productID = Model.ProductID, feeType = item.FeeType, inheritedID = item.FeeID, feeNameID = item.FeeNameID, feeDollarAmount = item.FeeDollarAmount, feeAmortizedCharge = item.FeeAmortizedCharge, feeAmortizedType = item.FeeAmortizedType, feePercent = item.FeePercent, feePercentType = item.FeePercentType }, new { @class = "add-existing-fee" })
                                            <input type="checkbox" class="existing-fee-checkbox" name="@item.FeeName" value="@item.FeeID" data-html-location=".amortized-fee-info .fees" />
                                            @item.FeeName.FeeNameName : [@Convert.ToDouble(item.FeeAmortizedCharge).ToString("c") | @item.FeeAmortizedType]
                                        </div>
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="cost-info">
                    <div class="editor-label">
                        @Html.LabelForRequired(model => model.ProductCost)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ProductCost, new { @class = "dollar-value" })
                        @Html.ValidationMessageFor(model => model.ProductCost)
                    </div>
                </div>

                <div class="dollar-fee-info">
                    <div class="fees add-target">
                        <b>Dollar Fees</b>
                        @foreach (var fee in Model.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount)))
                        {
                            string queryString = MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount);
                            ViewBag.FeeNames = new SelectList(new NPREntities().FeeNames.Where(f => f.FeeNameType == queryString).OrderBy(f => f.FeeNameName), "FeeNameID", "FeeNameName", fee.FeeNameID);
                            Html.RenderPartial("_DollarFeeEditor", fee);
                        }
                    </div>
                    @Html.ActionLink("Add Dollar Fee", "BlankEditorRow", null, new { productID = Model.ProductID, feeType = MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount), feeCalculation = MyExtensions.GetEnumDescription(FeeCalcuationList.To_Item_Cost) }, new { @class = "add-item" })
                </div>

                <div class="amortized-fee-info">
                    <div class="fees add-target">
                        <b>Amortized Fees</b>
                        @foreach (var fee in Model.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Amortized)))
                        {
                            string queryString = MyExtensions.GetEnumDescription(FeeTypeList.Amortized);
                            ViewBag.FeeNames = new SelectList(new NPREntities().FeeNames.Where(f => f.FeeNameType == queryString).OrderBy(f => f.FeeNameName), "FeeNameID", "FeeNameName", fee.FeeNameID);
                            Html.RenderPartial("_AmortizedFeeEditor", fee);
                        }
                    </div>
                    @Html.ActionLink("Add Amortized Fee", "BlankEditorRow", null, new { productID = Model.ProductID, feeType = MyExtensions.GetEnumDescription(FeeTypeList.Amortized), feeCalculation = MyExtensions.GetEnumDescription(FeeCalcuationList.To_Item_Cost) }, new { @class = "add-item" })
                </div>

                <div class="editor-label">
                    @Html.LabelForRequired(model => model.ProductNetCost)
                </div>
                <div class="editor-field">
                    @Html.DisplayFor(model => model.ProductNetCost, new { @class = "dollar-value" })
                    @Html.ValidationMessageFor(model => model.ProductNetCost)
                </div>

                <div class="percent-fee-info">
                    <div class="fees add-target">
                        <b>Percent Fees</b>
                        @foreach (var fee in Model.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived) && f.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Percent)).OrderBy(f => f.FeeLevel))
                        {
                            string queryString = MyExtensions.GetEnumDescription(FeeTypeList.Percent);
                            ViewBag.FeeNames = new SelectList(new NPREntities().FeeNames.Where(f => f.FeeNameType == queryString).OrderBy(f => f.FeeNameName), "FeeNameID", "FeeNameName", fee.FeeNameID);
                            Html.RenderPartial("_PercentFeeEditor", fee);
                        }
                    </div>
                    @Html.ActionLink("Add Percent Fee", "BlankEditorRow", null, new { productID = Model.ProductID, feeType = MyExtensions.GetEnumDescription(FeeTypeList.Percent), feeCalculation = MyExtensions.GetEnumDescription(FeeCalcuationList.To_Item_Net_Cost) }, new { @class = "add-item" })
                </div>

                <div class="editor-label">
                    @Html.LabelForRequired(model => model.ProductTotalCost)
                </div>
                <div class="editor-field">
                    @Html.DisplayFor(model => model.ProductTotalCost, new { @class = "dollar-value" })
                    @Html.ValidationMessageFor(model => model.ProductTotalCost)
                </div>

                <div>
                    <button type="submit" formaction="@Url.Action("SaveAndCalculateSellPrice", new { id = Model.ProductID, ReturnUrl = ViewBag.ReturnUrl })">Save & Calculate Price</button>
                    <br />
                    <button type="submit" formaction="@Url.Action("SaveAndCalculateMargin", new { id = Model.ProductID, ReturnUrl = ViewBag.ReturnUrl })">Save & Calculate Margin</button>
                    <span class="float-right">
                        @Html.ActionLink("Create New Fee Name", "Create", "FeeName", new { ReturnUrl = Url.Action("Edit", "Product", new { id = Model.ProductID, ReturnUrl = ViewBag.ReturnUrl }), ProductID = Model.ProductID }, null)
                    </span>
                </div>
            </div>
            <div>
                <div class="sell-price-info">
                    <h3>Sell Prices</h3>
                    @foreach(var sellPrice in Model.ProductSellPrices.Where(price => price.SellPriceStatus != MyExtensions.GetEnumDescription(Status.Archived)).OrderBy(price => price.SellPriceLevel))
                    {
                        if(sellPrice.Product == null)
                        {
                            sellPrice.Product = Model;
                        }
                        Html.RenderPartial("_SellPriceEditor", sellPrice);
                    }
                </div>
            </div>
        </div>
    }

    @if(Model != null)
    {
        <div class="upcharge-info">
            <div><b>Upcharge</b></div>
            @foreach(var upcharge in Model.ProductUpcharges.Where(p => p.UpchargeStatus != MyExtensions.GetEnumDescription(Status.Archived)))
            {
                Html.RenderPartial("_UpchargeEditor", upcharge);
            }
            @Html.ActionLink("Create New Upcharge", "Create", "ProductUpcharge", new { ReturnUrl = Url.Action("Edit", "Product", new { id = Model.ProductID, ReturnUrl = ViewBag.ReturnUrl }), ProductID = Model.ProductID }, null)
        </div>
    }
    
    @if(Model != null)
    {
        <div class="full-content product-decoration-info">
            <h4>Decoration Information</h4>
            @Html.ActionLink("Add Decoration", "BlankEditorRow", null, new { productID = Model.ProductID, isDecoration = true }, new { @class = "add-item" })
            <div class="product-decorations add-target">
                @foreach (var decoration in Model.ProductDecorations.Where(p => p.DecorationStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                {
                    var decorationMethods = new SelectList(ViewBag.DecorationMethodsDB, "DecorationMethodID", "DecorationMethodName", decoration.DecorationMethodID);
                    Html.RenderPartial("_ProductDecorationEditor", decoration, new ViewDataDictionary { { "DecorationMethods", decorationMethods } });
                }
            </div>
        </div>
    }

    <div class="full-content comment-info">
        <div class="comment-container">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductMerchandiserComments)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductMerchandiserComments)
                @Html.ValidationMessageFor(model => model.ProductMerchandiserComments)
            </div>
        </div>

        <div class="comment-container">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductInventoryBuyerComments)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductInventoryBuyerComments)
                @Html.ValidationMessageFor(model => model.ProductInventoryBuyerComments)
            </div>
        </div>

        <div class="comment-container">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductMentorComments)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductMentorComments)
                @Html.ValidationMessageFor(model => model.ProductMentorComments)
            </div>
        </div>

        <div class="comment-container">
            <div class="editor-label">
                @Html.LabelForRequired(model => model.ProductAccountManagerComments)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ProductAccountManagerComments)
                @Html.ValidationMessageFor(model => model.ProductAccountManagerComments)
            </div>
        </div>
    </div>
</div>
