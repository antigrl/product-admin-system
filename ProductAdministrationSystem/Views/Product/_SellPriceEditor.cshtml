@model PAS.Models.ProductSellPrice
@using PAS.Helpers
@using PAS.Models


    @using (Html.BeginCollectionItem("ProductSellPrices"))
    {
        <div class="product-fees">

            <h2 class="add-fee">Sell Price</h2>
            <div class="sell-price">
                <div class="price-level">
                    <span>
                        <strong>@Html.DisplayNameFor(model => model.SellPriceLevel): </strong>@Html.DisplayFor(model => model.SellPriceLevel)
                    </span><br>
                    <span>
                        <strong>Margin: </strong>
                    </span>
                    <span>
                        %@Html.TextBoxFor(model => model.SellPriceMarginPercent, new { @class = "percent-value" })
                    </span>
                    <span>
                        @Html.DisplayFor(model => model.SellPriceMarginDollarAmount)
                    </span>


                    @foreach (var fee in Model.Fees.Where(f => f.FeeStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                    {
                        if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Percent))
                        {
                            Html.RenderPartial("_SellPricePercentFeeEditor", fee);
                        }
                        if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Dollar_Amount))
                        {
                            Html.RenderPartial("_SellPriceDollarFeeEditor", fee);
                        }
                        if (fee.FeeType == MyExtensions.GetEnumDescription(FeeTypeList.Amortized))
                        {
                            Html.RenderPartial("_SellPriceAmortizedFeeEditor", fee);
                        }
                    }
                </div>
                <div class="final-sell">
                        <strong>@Html.DisplayFor(model => model.SellPriceName) Sell Price:</strong>

                        <span>
                            @Html.TextBoxFor(model => model.SellPriceFinalAmount, new { @class = "dollar-value" })
                        </span>

                </div>
                <div class="upcharge-sell">
                    @foreach (var upcharge in Model.Product.ProductUpcharges.Where(u => u.UpchargeStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                    {
                        foreach (var upchargeSellPrice in upcharge.UpchargeSellPrices.Where(s => s.UpchargeSellPriceStatus != MyExtensions.GetEnumDescription(Status.Archived)))
                        {
                            if (upchargeSellPrice.UpchargeSellPriceLevel == Model.SellPriceLevel)
                            {
                                <div>
                                    <strong>@upcharge.UpchargeName Sell Price: </strong>
                                    <span>$@upchargeSellPrice.UpchargeSellPriceFinalAmount</span>
                                    <strong>Rounded: </strong>
                                    <span>$@upchargeSellPrice.UpchargeSellPriceFinalRoundedAmount</span>
                                </div>
                            }
                        }
                    }
                    <div class="hidden-inputs">
                        @Html.HiddenFor(model => model.SellPriceID)
                        @Html.HiddenFor(model => model.ProductID)
                        @Html.HiddenFor(model => model.SellPriceLevel)
                        @Html.HiddenFor(model => model.SellPriceName)
                        @Html.HiddenFor(model => model.SellPriceMarginDollarAmount)
                        @Html.HiddenFor(model => model.SellPriceMarginPercent)
                        @Html.HiddenFor(model => model.SellPriceStatus)
                    </div>
                </div>
            </div>

        </div>

    }

